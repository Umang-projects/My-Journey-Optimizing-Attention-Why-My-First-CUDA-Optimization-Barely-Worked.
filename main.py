# -*- coding: utf-8 -*-
"""Main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/118tCIkRq8FjFQaanNsR7CwscG9g8AajR
"""

int main() {
    std::cout << "Attention with SEQ_LEN=" << SEQ_LEN << ", D_K=" << D_K << std::endl;

    // --- 1. Host Data Initialization ---
    std::vector<float> h_q(SEQ_LEN * D_K);
    std::vector<float> h_k(SEQ_LEN * D_K);
    std::vector<float> h_v(SEQ_LEN * D_K);
    std::mt19937 gen(1337);
    std::uniform_real_distribution<> dis(-1.0, 1.0);
    for (size_t i = 0; i < h_q.size(); ++i) {
        h_q[i] = dis(gen);
        h_k[i] = dis(gen);
        h_v[i] = dis(gen);
    }

    // --- 2. Device Memory Allocation ---
    float* d_q, * d_k, * d_v, * d_scores, * d_output_naive, * d_output_optimized;
    CHECK_CUDA(cudaMalloc(&d_q, h_q.size() * sizeof(float)));
    CHECK_CUDA(cudaMalloc(&d_k, h_k.size() * sizeof(float)));
    CHECK_CUDA(cudaMalloc(&d_v, h_v.size() * sizeof(float)));
    CHECK_CUDA(cudaMalloc(&d_scores, SEQ_LEN * SEQ_LEN * sizeof(float)));
    CHECK_CUDA(cudaMalloc(&d_output_naive, h_q.size() * sizeof(float)));
    CHECK_CUDA(cudaMalloc(&d_output_optimized, h_q.size() * sizeof(float)));

    // --- 3. Copy Data from Host to Device ---
    CHECK_CUDA(cudaMemcpy(d_q, h_q.data(), h_q.size() * sizeof(float), cudaMemcpyHostToDevice));
    CHECK_CUDA(cudaMemcpy(d_k, h_k.data(), h_k.size() * sizeof(float), cudaMemcpyHostToDevice));
    CHECK_CUDA(cudaMemcpy(d_v, h_v.data(), h_v.size() * sizeof(float), cudaMemcpyHostToDevice));

    // --- 4. Timing Events ---
    cudaEvent_t start, stop;
    CHECK_CUDA(cudaEventCreate(&start));
    CHECK_CUDA(cudaEventCreate(&stop));
    float milliseconds = 0;

    // --- 5. Run Naive Implementation ---
    dim3 grid_dim_2d((SEQ_LEN + 15) / 16, (SEQ_LEN + 15) / 16);
    dim3 block_dim_2d(16, 16);
    dim3 grid_dim_1d((SEQ_LEN + 255) / 256);
    dim3 block_dim_1d(256);

    std::cout << "\n--- Running Naive (Global Memory) Implementation ---" << std::endl;
    CHECK_CUDA(cudaEventRecord(start));
    matmul_naive_kernel << <grid_dim_2d, block_dim_2d >> > (d_q, d_k, d_scores, SEQ_LEN, D_K);
    scale_softmax_gemm_kernel << <grid_dim_1d, block_dim_1d >> > (d_scores, d_v, d_output_naive, SEQ_LEN, D_K);
    CHECK_CUDA(cudaEventRecord(stop));
    CHECK_CUDA(cudaEventSynchronize(stop));
    CHECK_CUDA(cudaEventElapsedTime(&milliseconds, start, stop));
    std::cout << "Latency: " << milliseconds << " ms" << std::endl;

    // --- 6. Run Optimized Implementation ---
    dim3 tiled_grid_dim((SEQ_LEN + TILE_WIDTH - 1) / TILE_WIDTH, (SEQ_LEN + TILE_WIDTH - 1) / TILE_WIDTH);
    dim3 tiled_block_dim(TILE_WIDTH, TILE_WIDTH);

    std::cout << "\n--- Running Optimized (Shared Memory) Implementation ---" << std::endl;
    CHECK_CUDA(cudaEventRecord(start));
    matmul_tiled_kernel << <tiled_grid_dim, tiled_block_dim >> > (d_q, d_k, d_scores, SEQ_LEN, D_K);
    scale_softmax_gemm_kernel << <grid_dim_1d, block_dim_1d >> > (d_scores, d_v, d_output_optimized, SEQ_LEN, D_K);
    CHECK_CUDA(cudaEventRecord(stop));
    CHECK_CUDA(cudaEventSynchronize(stop));
    CHECK_CUDA(cudaEventElapsedTime(&milliseconds, start, stop));
    std::cout << "Latency: " << milliseconds << " ms" << std::endl;

    // --- 7. Verification ---
    std::cout << "\n--- Verifying Results ---" << std::endl;
    std::vector<float> h_output_cpu(SEQ_LEN * D_K);
    std::vector<float> h_output_gpu(SEQ_LEN * D_K);

    attention_on_cpu(h_q, h_k, h_v, h_output_cpu);

    std::cout << "Verifying Naive GPU result..." << std::endl;
    CHECK_CUDA(cudaMemcpy(h_output_gpu.data(), d_output_naive, h_output_gpu.size() * sizeof(float), cudaMemcpyDeviceToHost));
    verify_results(h_output_cpu, h_output_gpu);

    std::cout << "Verifying Optimized GPU result..." << std::endl;
    CHECK_CUDA(cudaMemcpy(h_output_gpu.data(), d_output_optimized, h_output_gpu.size() * sizeof(float), cudaMemcpyDeviceToHost));
    verify_results(h_output_cpu, h_output_gpu);


    // --- 8. Cleanup ---
    CHECK_CUDA(cudaFree(d_q));
    CHECK_CUDA(cudaFree(d_k));
    CHECK_CUDA(cudaFree(d_v));
    CHECK_CUDA(cudaFree(d_scores));
    CHECK_CUDA(cudaFree(d_output_naive));
    CHECK_CUDA(cudaFree(d_output_optimized));
    CHECK_CUDA(cudaEventDestroy(start));
    CHECK_CUDA(cudaEventDestroy(stop));

    return 0;
}